#version 330 core
out vec4 FragColor;

struct Material{
    //环境光，漫反射和高光材质颜色以及一个反射度（影响镜面高光的散射/半径）
    sampler2D diffuse;	
    sampler2D specular;
    //sampler2D emissionMap;
    float shininess;
};

struct Light{
   //vec3 position;	//本质是个点
   vec3 direction;	//是个向量

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

//uniform vec3 lightPos;
//uniform vec3 lightColor;
uniform vec3 viewPos;

uniform Material material;
uniform Light light;

void main(){
    //环境光，实际上就是漫反射的光
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

   //漫反射
   vec3 norm = normalize(Normal);
   //vec3 lightDir = normalize(light.position - FragPos);
   vec3 lightDir = normalize(-light.direction);	//直接向量取反
   float diff = max(dot(norm, lightDir), 0.0);
   vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TexCoords)));

   //镜面光
   vec3 viewDir = normalize(viewPos - FragPos);
   vec3 reflectDir = reflect(-lightDir, norm);
   float spec = pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
   vec3 specular = light.specular * (spec * vec3(texture(material.specular, TexCoords)));
   //vec3 specular = light.specular * (spec *(vec3(1.0) - vec3(texture(material.specular, TexCoords))));	//将高光贴图反转，亮的变暗，暗的变亮
   //添加放射光贴图，因为是自发光，所以不需要乘光源的分量。
   //vec3 emission = vec3(texture(material.emissionMap, TexCoords));

   //vec3 result = ambient + diffuse + specular + emission;
   vec3 result = ambient + diffuse + specular;
   FragColor = vec4(result, 1.0);
}