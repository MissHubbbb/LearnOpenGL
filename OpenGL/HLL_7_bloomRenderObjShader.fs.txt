//使用多渲染目标(MRT),能指定多个像素着色器的输出，有了它还能再一个单独渲染处理中提取前两个图片
//但是要注意使用MRT的前提是有多个颜色缓冲附加到当前绑定的帧缓冲对象上

#version 330 core
//这里就指定了多个像素着色器的输出
layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

struct Light {
    vec3 Position;
    vec3 Color;
};

uniform Light lights[4];
uniform sampler2D diffuseTexture;
uniform vec3 viewPos;

void main(){
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    // ambient
    vec3 ambient = 0.0 * color;

    //lighting
    vec3 lighting = vec3(0.0);  //最终多盏灯光的颜色结果
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    //逐灯光计算颜色结果
    for(int i = 0; i < 4; i++){
        // diffuse
        vec3 lightDir = normalize(lights[i].Position - fs_in.FragPos);
        float diff = max(dot(lightDir, normal), 0.0);
        vec3 result = lights[i].Color * diff * color;      

        //计算光衰
        float distance = length(fs_in.FragPos - lights[i].Position);
        result *= 1.0 / (distance * distance);
        lighting += result;
    }
    vec3 result = ambient + lighting;

    //检查这些灯光的最终着色结果，然后在BrightColor颜色缓冲中，如果大于阈值就保留这个像素，否则就设为黑色。
    //而FragColor颜色缓冲则直接输出原本的颜色
    float brightness = dot(result, vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1.0)
        BrightColor = vec4(result, 1.0);
    else
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
    FragColor = vec4(result, 1.0);
}