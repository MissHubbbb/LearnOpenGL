//将三角形顶点转变到六个光空间中
#version 330 core
//我们输入一个三角形，输出总共6个三角形（6*3顶点，所以总共18个顶点）
layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 shadowMatrices[6];

out vec4 FragPos;	// FragPos from GS (output per emitvertex)

void main(){
    for(int face = 0; face < 6; ++face){
         //几何着色器有一个内建变量叫做gl_Layer，它指定发出基本图形送到立方体贴图的哪个面。当然这只有当我们有了一个附加到激活的帧缓冲的立方体贴图纹理才有效。
        gl_Layer = face;	
        for(int i = 0; i < 3; ++i){
            FragPos = gl_in[i].gl_Position;
            gl_Position = shadowMatrices[face] * FragPos;
            EmitVertex();
        }
        EndPrimitive();
    }
}

