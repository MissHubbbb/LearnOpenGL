#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 Normal;
out vec3 FragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main(){        
    FragPos = vec3(model * vec4(aPos,1.0));	//将顶点变换到世界空间中，因为需要在世界空间中进行所有的光照计算
    Normal = mat3(transpose(inverse(model))) * aNormal;	//将模型矩阵求逆并转置，最后取矩阵的左上方的3*3子矩阵与模型空间中的法向量相乘，得到世界空间中的法向量(法线矩阵最好在cpu中实现，再通过uniform传入，求逆是一项开销很大的运算)
    gl_Position = projection * view * vec4(FragPos, 1.0);
}