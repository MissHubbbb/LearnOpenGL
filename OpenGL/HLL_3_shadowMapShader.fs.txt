#version 330 core
out vec4 FragColor;

in VS_OUT{
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec4 FragPosLightSpace;	//光投影空间下的片元坐标，需要我们自己来进行裁剪空间的处理(透视除法)
} fs_in;

uniform sampler2D diffuseTexture;
uniform sampler2D shadowMap;

uniform vec3 lightPos;
uniform vec3 viewPos;


float ShadowCalculation(vec4 fragPosLightSpace){
    //首先要检查一个片段是否在阴影中，把光空间片段位置转换为裁切空间的标准化设备坐标。
    //------------------------------------------------------------------------
    //光投影空间下的片元坐标，要进行透视除法，转换到NDC下。返回了片段在光空间的-1到1的范围。
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    //projCoords的xyz分量都是[-1,1]，而为了和深度贴图的深度相比较，z分量需要变换到[0,1]；为了作为从深度贴图中采样的坐标，xy分量也需要变换到[0,1]。所以整个projCoords向量都需要变换到[0,1]范围。
    projCoords = projCoords * 0.5 + 0.5;
    //从深度贴图中采样(深度贴图存储的是从光视角出发的最近深度片段)
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    //为了得到片段的当前深度，我们简单获取投影向量的z坐标，它等于从光的透视视角出发观察到的片段的深度。
    float currentDepth = projCoords.z;
    //比较，如果当前深度高于最近深度，片段就是在阴影中
    float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    return shadow;
}

void main(){
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightColor = vec3(1.0);
    //环境光
    vec3 ambient = 0.15 * color;
    //漫反射
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    //镜面反射(Blinn-Phong光照模型)
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = normalize(reflect(-lightDir, normal));
    vec3 halfDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(halfDir, normal), 0.0), 64.0);
    vec3 specular = spec * lightColor;
    //计算阴影, shadow值为：当fragment在阴影中时是1.0，在阴影外是0.0
    float shadow = ShadowCalculation(fs_in.FragPosLightSpace);
    //diffuse和specular颜色会乘以这个阴影元素。由于阴影不会是全黑的（由于散射），我们把ambient分量从乘法中剔除。
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;

   FragColor = vec4(lighting, 1.0f);
}