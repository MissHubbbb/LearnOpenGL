#version 330 core
out vec4 FragColor;
in vec3 WorldPos;

uniform samplerCube environmentMap;
uniform float roughness;        //输入的粗糙度随着预滤波的立方体贴图的mipmap级别变化(从0.0到1.0)

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------

float NormalDistributionGGX(vec3 N, vec3 H, float roughness);
float RadicalInverse_VdC(uint bits);
vec2 Hammersley(uint i, uint N);
vec3 ImportanceNormalSampleGGX(vec2 Xi, vec3 N, float roughness);

void main(){
    //因为我们在预滤波的时候不能事先知道观察方向，所以假设观察方向(也就是镜面反射方向)，总是等于输出采样方向
    vec3 N = normalize(WorldPos);
    vec3 R = N;
    vec3 V = R;

    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);

    for(uint i = 0u; i < SAMPLE_COUNT; i++){
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = ImportanceNormalSampleGGX(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0){    //将半球面上的所有光源颜色都加起来
            // 基于roughness和pdf来采样环境光照贴图的相应mipmap图
            
            float D = NormalDistributionGGX(N, H, roughness);
            float NdotH = max(0.0, dot(N, H));
            float HdotV = max(0.0, dot(H, V));
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;     //这个pdf是根据书pbrt14.1.1节得来的
            
            float resolution = 512.0;   //cubemap每一面的分辨率
            float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

            //prefilteredColor += texture(environmentMap, L).rgb;
            prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
            totalWeight += NdotL;       //NdotL较小的采样最终权重也较小
        }
    }
    //滤波
    prefilteredColor = prefilteredColor / totalWeight;

    //将滤波后的颜色作为输出值
    FragColor = vec4(prefilteredColor, 1.0);
}
// ----------------------------------------------------------------------------

float NormalDistributionGGX(vec3 N, vec3 H, float roughness){
    float a = roughness * roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

// Van Der Corput 序列
float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
// Hammersley 序列 : 低差异序列,在后面作为输入来生成采样向量
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}  

// ----------------------------------------------------------------------------
// GGX重要性采样 : 返回采样向量(该向量大体围绕着预估的微表面的半向量)
// 其中Xi是我们上面的 Hammersley函数 的返回值
vec3 ImportanceNormalSampleGGX(vec2 Xi, vec3 N, float roughness){
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // 从球面坐标转化到直角坐标系的坐标(切线空间)
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    //从切线空间转换到世界空间
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}