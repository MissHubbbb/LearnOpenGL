#version 330 core
#define NR_POINT_LIGHTS 4
out vec4 FragColor;

struct Material{
    //环境光，漫反射和高光材质颜色以及一个反射度（影响镜面高光的散射/半径）
    sampler2D diffuse;	
    sampler2D specular;
    //sampler2D emissionMap;
    float shininess;
};

//定向光结构体
struct DirLight{
    vec3 direction;
 
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

//点光源结构体
struct PointLight{
    vec3 position;

    float constant;
    float linear;
    float quadratic;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

//聚光源结构体
struct SpotLight{
    vec3 position;
    vec3 direction;

   float cutOff;
   float outerCutOff;

   float constant;
   float linear;
   float quadratic;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform SpotLight spotLight;

uniform vec3 viewPos;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal,vec3 fragPos, vec3 viewDir);

void main(){
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

   //第一阶段：定向光源
   vec3 result = CalcDirLight(dirLight, norm, viewDir);

   //第二阶段：点光源
   for(int i = 0; i < NR_POINT_LIGHTS; i++){
      result += CalcPointLight(pointLights[i],norm, FragPos, viewDir);
   }

   //第三阶段：聚光光源
   result += CalcSpotLight(spotLight, norm, FragPos, viewDir);

   //最后：合并
   FragColor = vec4(result, 1.0);
}

//定向光着色计算
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir){
    vec3 lightDir = normalize(-light.direction);

    //环境光着色
    vec3 ambient = dirLight.ambient * vec3(texture(material.diffuse, TexCoords));
    //漫反射着色
    float diff = max(dot(lightDir,normal),0.0);
    vec3 diffuse = dirLight.diffuse * diff * vec3(texture(material.diffuse, TexCoords));
    //镜面反射着色
    vec3 reflectDir = reflect(-lightDir,normal);
    float spec = pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
    vec3 specular = dirLight.specular * spec * vec3(texture(material.specular, TexCoords));
    //合并结果
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - fragPos);
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    //环境光着色
    vec3 ambient = light.ambient * attenuation * vec3(texture(material.diffuse, TexCoords));
    //漫反射着色
    float diff = max(dot(lightDir, normal),0.0);
    vec3 diffuse = light.diffuse * diff * attenuation * vec3(texture(material.diffuse, TexCoords));
    //镜面反射着色
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(reflectDir, viewDir),0.0),material.shininess);
    vec3 specular = light.specular * spec * attenuation * vec3(texture(material.specular, TexCoords));
    
    return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - fragPos);
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    float cosTheta = dot(lightDir, normalize(-light.direction));
    //开始考虑内外切光角
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((cosTheta - light.outerCutOff) / epsilon, 0.0, 1.0);
    
    //环境光着色
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
    //漫反射着色
    float diff = max(dot(lightDir, normal),0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));
    //镜面反射着色
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(reflectDir, viewDir),0.0),material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));

    //合并结果
    return (ambient + (diffuse + specular) * intensity * attenuation);
}