#version 330 core
out vec4 FragColor;

struct Material{
    //环境光，漫反射和高光材质颜色以及一个反射度（影响镜面高光的散射/半径）
    sampler2D diffuse;	
    sampler2D specular;
    //sampler2D emissionMap;
    float shininess;
};

struct Light{
   vec3 position;	//本质是个点
   vec3 direction;	//是个向量
   float cutOff;	//内切光角(如果是聚光源就需要有这个属性)
   float outerCutOff;	//外切光角(为了让聚光源有个柔和的照明边缘需要有外切光角)

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;

   //光衰减公式Fa = 1.0/(Kc+Kl * d + Kq * d²)
   float constant;	//光衰减公式中的常数项Kc 
   float linear;	//一次项
   float quadratic;	//二次项
};

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

//uniform vec3 lightPos;
//uniform vec3 lightColor;
uniform vec3 viewPos;

uniform Material material;
uniform Light light;

void main(){
   vec3 lightDir = normalize(light.position - FragPos);

   float cosTheta = dot(lightDir, normalize(-light.direction));	//LightDir向量和SpotDir向量之间的夹角余弦值
   float epsilon = light.cutOff - light.outerCutOff;
   float intensity = clamp((cosTheta - light.outerCutOff) / epsilon, 0.0, 1.0);    //将强度规范在0-1范围内

       //执行光照计算
       //环境光，实际上就是漫反射的光
       vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

      //漫反射
      vec3 norm = normalize(Normal);      
      //vec3 lightDir = normalize(-light.direction);	//直接向量取反
      float diff = max(dot(norm, lightDir), 0.0);
      vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TexCoords)));

      //镜面光
      vec3 viewDir = normalize(viewPos - FragPos);
      vec3 reflectDir = reflect(-lightDir, norm);
      float spec = pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
      vec3 specular = light.specular * (spec * vec3(texture(material.specular, TexCoords)));
      //vec3 specular = light.specular * (spec *(vec3(1.0) - vec3(texture(material.specular, TexCoords))));	//将高光贴图反转，亮的变暗，暗的变亮
      //添加放射光贴图，因为是自发光，所以不需要乘光源的分量。
      //vec3 emission = vec3(texture(material.emissionMap, TexCoords));

      float distance = length(light.position - FragPos);
      float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));	//光衰
       //vec3 result = ambient + diffuse + specular + emission;
       vec3 result = ambient + (diffuse + specular) * attenuation * intensity;
       FragColor = vec4(result, 1.0);
}