#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out VS_OUT {
    vec3 FragPos;	//顶点的世界空间的坐标
    vec3 Normal;	//世界空间下的法线
    vec2 TexCoords;
} vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

uniform bool inverse_normals;	//法线是否是反的

void main(){
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;

    //发现如果是反的，需要反转法线
    vec3 n = inverse_normals ? -aNormal : aNormal;

    //将法线转换到世界空间中
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalize(normalMatrix * n);

    //顶点的裁剪空间的坐标，后续的NDC坐标是由opengl自己来做的
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}