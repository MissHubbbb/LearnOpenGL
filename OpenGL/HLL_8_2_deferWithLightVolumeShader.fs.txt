#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

//下面几个变量都能从gBuffer中采样获取到
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;

struct Light {
    vec3 Position;
    vec3 Color;
    
    float Linear;
    float Quadratic;
    float Radius;
};
const int NR_LIGHTS = 32;
uniform Light lights[NR_LIGHTS];
uniform vec3 viewPos;

void main(){
    //从gBuffer中检索数据
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 Normal = texture(gNormal, TexCoords).rgb;
    vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;
    float Specular = texture(gAlbedoSpec, TexCoords).a;

    //然后在世界空间中，像惯例一样计算光照结果
    vec3 lighting  = Diffuse * 0.1; // hard-coded ambient component
    vec3 viewDir  = normalize(viewPos - FragPos);
    for(int i = 0; i < NR_LIGHTS; ++i)
    {
        // 计算当前片元和光源位置之间的距离
        float distance = length(lights[i].Position - FragPos);

        //虽然light volume的逻辑就是用if分支来进行判断，但是在实际的应用中是不可行的。
        //因为GPU和GLSL不擅长忧患循环和分支，这通常意味着一个着色器运行时总是执行一个if语句的所有分支从而保证着色器运行都是一样的，这使得我们的半径检测优化变得完全无用，我们仍然在对所有光源计算光照!
        if(distance < lights[i].Radius)
        {
            // diffuse
            vec3 lightDir = normalize(lights[i].Position - FragPos);
            vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color;
            // specular
            vec3 halfwayDir = normalize(lightDir + viewDir);  
            float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
            vec3 specular = lights[i].Color * spec * Specular;
            // attenuation
            float distance = length(lights[i].Position - FragPos);
            float attenuation = 1.0 / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance);
            diffuse *= attenuation;
            specular *= attenuation;
            lighting += diffuse + specular;    
        }    
    }
    FragColor = vec4(lighting, 1.0);
}