#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D diffuseTexture;
uniform samplerCube depthMap;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform float far_plane;
uniform bool shadows;

//与其在原始方向向量附近处采样，不如在采样方向向量的垂直方向进行采样更有意义
vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

float ShadowCalculation(vec3 fragPos){
//# region: non-soft shadow
    vec3 lightToFrag = fragPos - lightPos;
    //closestDepth是光源和它最接近的可见fragment之间的标准化的深度值。使用方向向量来采样立方体贴图
    //float closestDepth = texture(depthMap, lightToFrag).r;
    //closestDepth值在0到1的范围内，所以我们先将其转换回0到far_plane的范围，这需要把他乘以far_plane
    //closestDepth *= far_plane;
    //获取当前片元和光源之间的深度值，也就是两点之间的距离
    float currentDepth = length(lightToFrag);   
    //比较，同时需要包含一个阴影偏移，防止失真
    //float bias = 0.05;
    //float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;    
//# end region

//# region: simple PCF
    //float shadow = 0.0;
    //float bias = 0.05;
    //float samples = 4.0;
    //float offset = 0.1;
    //for(float x = -offset; x < offset; x+= offset / (samples * 0.5)){
        //for(float y = -offset; y < offset; y += offset /(samples * 0.5)){
            //for(float z = -offset; z < offset; z += offset / (samples * 0.5)){
	//float closestDepth = texture(depthMap, lightToFrag + vec3(x,y,z)).r;
	//closestDepth *= far_plane;
	//if(currentDepth - bias > closestDepth)
	    //shadow += 1.0;
            //}
        //}
    //}
    //shadow /= (samples * samples * samples);
// #end region

//#region: sample offset directions
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i){
        //这里我们把一个偏移量添加到指定的diskRadius中，它在lightToFrag方向向量周围从立方体贴图里采样。
        float closestDepth = texture(depthMap, lightToFrag + sampleOffsetDirections[i] * diskRadius).r;
        closestDepth *= far_plane;
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
    return shadow;
}

void main(){
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);
    vec3 lightColor = vec3(0.3);
    // Ambient
    vec3 ambient = 0.3 * color;
    // Diffuse
    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // Specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;    
    // Calculate shadow
    float shadow = shadows ? ShadowCalculation(fs_in.FragPos) : 0.0;   
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    

    FragColor = vec4(lighting, 1.0f);
    //FragColor = vec4(vec3(closestDepth / far_plane), 1.0);
    //FragColor = vec4(shadow,shadow,shadow,1.0f);
}