#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

//灯光的数据结构
struct Light {
    vec3 Position;
    vec3 Color;
};

uniform Light lights[16];	//一开始开辟16盏灯的空间
uniform sampler2D diffuseTexture;
uniform vec3 viewPos;

void main(){
    vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
    vec3 normal = normalize(fs_in.Normal);		//归一化世界空间的法线方向

    // ambient
    vec3 ambient = 0.0 * color;
    // lighting
    vec3 lighting = vec3(0.0);	//一开始的灯光默认为0

    //逐光源计算光照结果
    for(int i = 0; i < 16; i++){
        // diffuse
        vec3 lightDir = normalize(lights[i].Position - fs_in.FragPos);
        float diff = max(dot(lightDir, normal), 0.0);
        vec3 diffuse = lights[i].Color * diff * color;      
        vec3 result = diffuse; 

        // attenuation (计算光照衰减)
        float distance = length(fs_in.FragPos - lights[i].Position);
        result *= 1.0 / (distance * distance);
        lighting += result;       
    }

    FragColor = vec4(ambient + lighting, 1.0);
}